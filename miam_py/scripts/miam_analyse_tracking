#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
	Display plots for helping with the analysis of trajectory tracking.
	See inline help for more info.
'''

import argparse

import os
import miam_py

import sys
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

if __name__ == "__main__":

	description_str = "Extract and plot trajectory tracking information from a robot log file."

	parser = argparse.ArgumentParser(description = description_str, formatter_class = argparse.RawTextHelpFormatter)
	parser.add_argument("input", help = "Input csv log file.")
	args = parser.parse_args()

	# Load log file.
	logfile = miam_py.LogLoader(args.input)
	# Get robot parameters from file.

	dimensions =logfile.log_info[1].split('_')
	wheelRadius = float(dimensions[0].split(':')[1])
	wheelSpacing = float(dimensions[1].split(':')[1])
	stepSize = float(dimensions[2].split(':')[1])

	time = logfile.data['time']
	# Load robot x, y, theta position.
	x = logfile.data['currentPositionX']
	y = logfile.data['currentPositionY']
	theta = logfile.data['currentPositionTheta']

	v_right = logfile.data['commandVelocityRight']
	v_left = logfile.data['commandVelocityLeft']

	# Recompute robot velocity.
	v_right = [v * stepSize * wheelRadius for v in v_right]
	v_left = [v * stepSize * wheelRadius for v in v_left]

	v = [(v_right[i] + v_left[i]) / 2.0 for i in range(len(v_right))]
	omega = [(v_right[i] - v_left[i]) / 2.0 / wheelSpacing for i in range(len(v_right))]

	# Load trajectory x, y, theta, velocities.
	trajectory_x = logfile.data['targetPositionX']
	trajectory_y = logfile.data['targetPositionY']
	trajectory_theta = logfile.data['targetPositionTheta']
	trajectory_v = logfile.data['targetLinearVelocity']
	trajectory_omega = logfile.data['targetAngularVelocity']

	# First plot: plot (x,y) position on playing field.
	plt.figure(1)
	plt.plot(x, y, color='w', linewidth=5.0)
	plt.plot(trajectory_x, trajectory_y, color='w', linewidth=5.0)
	plt.plot(x, y, label="Current Position", linewidth=3.0)
	plt.plot(trajectory_x, trajectory_y, label="Target Position", linewidth=3.0)
	plt.xlim(-500, 3500)
	plt.ylim(-500, 2500)
	plt.grid()
	plt.gca().invert_yaxis()
	# Show table image as background.
	table = mpimg.imread(os.path.join(os.path.dirname(miam_py.__file__),'../images/table.png'))
	plt.imshow(np.flipud(table), extent=[-500, 3500, -500, 2500], alpha=0.6)
	plt.legend(bbox_to_anchor=(1.0, 1.0), loc = 1)

	# Second plot: error in each component, plus velocity
	fig, axs = plt.subplots(nrows=2, ncols=2, sharex = True)

	axs[0][0].plot(time, theta, label="Current angle")
	axs[0][0].plot(time, trajectory_theta, label="Target angle")
	axs[0][0].plot(time, [theta[i] - trajectory_theta[i] for i in range(len(theta))], label="Error")

	position_error = [np.sqrt((x[i] - trajectory_x[i])**2 + (y[i] - trajectory_y[i])**2) for i in range(len(x))]
	axs[0][1].plot(time, position_error, label="Position error")

	axs[1][0].plot(time, v, label="Linear velocity")
	axs[1][0].plot(time, trajectory_v, label="Trajectory linear velocity")

	axs[1][1].plot(time, omega, label="Angular velocity")
	axs[1][1].plot(time, trajectory_omega, label="Trajectory angular velocity")

	for ax in axs:
		for a in ax:
			a.legend(bbox_to_anchor=(1.0, 1.0), loc = 1)
			a.grid()
	plt.show()
